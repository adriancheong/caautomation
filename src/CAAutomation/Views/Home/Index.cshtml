@{
    ViewData["Title"] = "Home Page";
}

<style>
    .negative {
        color: red
    }

    .positive {
        color: green
    }
</style>



<div id="results" class="modal fade">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Corporate Action Elected</h3>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div id="modalBody" class="modal-body">
                <h4><p id="p1">Order Executed. Cash Selected.</p></h4>
                <h4><p id="p2"></p></h4>
                <h4><p id="p3"></p></h4>
                <h4><p id="p4"></p></h4>
                <h4><p id="p5"></p></h4>
                <h4><p id="p6"></p></h4>
                <h4><p id="p7" style="font-weight:bolder"></p></h4>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>




<div>
    <div class="col-xs-8">
        <div id="chartContainer" style="height: 300px; width:100%;">
        </div>
    </div>
    <div class="col-xs-4">
        <h1>
            <span>Current Price: </span>
            <span id="currPrice"></span>
        </h1>
        <h2>
            <span>Time Left: </span>
            <span id="timeLeft"></span>
            <span> Seconds</span>
        </h2>
    </div>
</div>


<div class="form-group row">
    <label for="myPrice" class="col-2 col-form-label">Reinvt Price</label>
    <div class="col-10">
        <input id="myPrice" class="form-control" type="number" value="10.00">
    </div>
</div>

<div class="jumbotron">
    <h2><span id="status"></span><span id="statusValue"></span><span id="va"></span></h2>
</div>

<script>
    var prices = [
9.5,
9.6,
9.7,
9.8,
9.9,
10.0,
10.1,
10.2,
10.3,
10.4,
10.5,
10.6,
10.7,
10.8,
10.9,
11,
11.1,
11.2,
11.3,
11.4,
11.5,
11.6,
11.7,
11.8,
11.9,
12,
12.1,
12.2,
12.3,
12.4,
12.5,
12.6,
12.7,
12.8,
12.9,
13,
13.1,
13.2,
13.3,
13.4,
13.5
    ];

    var priceIndex = 0;
    var currPrice = 10.00;
    var reinvtPrice = $("#myPrice").val();
    var speed = 1000;
    var notified = false;
    var timeLeft = 16;
    var noOfShares = 10000000;
    var cashPrice = 0.5;

    function go() {

        currPrice = getCurrPrice();

        $("#currPrice").text(Math.round(currPrice * 100) / 100);
        $("#timeLeft").text(timeLeft);
        var myPrice = $("#myPrice").val();
        var notifyPrice = $("#notifyPrice").val();

        //if (currPrice >= notifyPrice && !notified) {
        //    Notify();
        //    $("#notify").removeAttr('hidden');
        //    notified = true;
        //}
        
        var va = Math.round((currPrice - myPrice) * 100) / 100;
        if (va > 0) {
            $("#status").text("Election choice: ");
            $("#statusValue").text("Stock");
            $("#va").text("VA " + va.toString());
            $("#va").removeClass("negative");
            $("#va").addClass("positive");
        }
        else {
            $("#status").text("Election choice: ");
            $("#statusValue").text("Cash");
            $("#va").text("VA " + va.toString());
            $("#va").removeClass("positive");
            $("#va").addClass("negative");
        }


        //var randomPersonIndex = Math.floor(Math.random() * allStaff.length);
        timeLeft--;

        if (timeLeft < 0) {

            if (va > 0) {
                var cash = cashPrice * noOfShares;
                var realised = cash / reinvtPrice * currPrice;

                $("#p1").text("CA instruction to elect 100% stock sent to bank");
                $("#p2").text("Order executed to sell stock");
                $("#p3").text("Done @@ " + currPrice.toString());
                $("#p4").text("No. of shares: " + noOfShares.toString());
                $("#p5").text("Realized sales proceeds " + (realised).toLocaleString("en-US", { style: "currency", currency: "USD", minimumFractionDigits: 2 }));
                $("#p6").text("Amount if opted for cash: " + (cash).toLocaleString("en-US", { style: "currency", currency: "USD", minimumFractionDigits: 2 }));
                $("#p7").text("VA Generated: " + (realised - cash).toLocaleString("en-US", { style: "currency", currency: "USD", minimumFractionDigits: 2 }));
            }

            $("#results").modal();
            return;
        }

        setTimeout(go, speed);        
    }

    getCurrPrice = function () {
        if (priceIndex >= prices.length)
            priceIndex = 0;
        return prices[priceIndex++];
    };


    function processData(allText) {
        var record_num = 5;  // or however many elements there are in each row
        var allTextLines = allText.split(/\r\n|\n/);
        var entries = allTextLines[0].split(',');
        var lines = [];

        var headings = entries.splice(0, record_num);
        while (entries.length > 0) {
            var tarr = [];
            for (var j = 0; j < record_num; j++) {
                tarr.push(headings[j] + ":" + entries.shift());
            }
            lines.push(tarr);
        }
        // alert(lines);
    }

    function Notify() {
        var url = "/Notify";

        $.ajax({
            type: "POST",
            contentType: "application/json",
            url: url,
            success: function (ret) {
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.log(textStatus, errorThrown);
            },
            complete: function () {
            }
        });
    };


    function priceData() {
        var dps = []; // dataPoints

        var chart = new CanvasJS.Chart("chartContainer", {
            title: {
                text: "Stock Price"
            },
            data: [{
                type: "line",
                dataPoints: dps
            }]
        });

        var xVal = 0;
        var yVal = 10;
        var updateInterval = 1000;
        var dataLength = 50; // number of dataPoints visible at any point
        var variance = 0.5;

        for (var j = 0; j < dataLength; j++) {
            yVal = yVal + (variance + Math.random() * (-variance - variance));
            dps.push({
                x: xVal,
                y: yVal
            });
            xVal++;
        };
        if (dps.length > dataLength) {
            dps.shift();
        }

        chart.render();




        var updateChart = function () {
            dps.push({
                x: xVal,
                y: prices[priceIndex]
            });
            xVal++;

            if (dps.length > dataLength) {
                dps.shift();
            }

            if (timeLeft >= 0)
                chart.render();

        };

        // generates first set of dataPoints
        updateChart(dataLength);

        // update chart after specified time.
        setInterval(function () { updateChart() }, updateInterval);
    }


    $(function () {
        go();
        priceData();
    });

</script>